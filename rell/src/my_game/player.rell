// STEP 1 - CREATE PLAYER TABLE
// ENTITIES ARE TABLES STORED IN THE DATABASE
entity player {
	key account: ft3.acc.account;
	key username: text;
	mutable level: integer;
	mutable strength: integer;
	mutable speed: integer;
	mutable skill: integer;
}

// STEP 2 - CREATE PLAYER INFO STRUCT
// STRUCTS ARE HELD TEMPORARILY IN MEMORY BUT NOT IN THE DATABASE
struct player_info{
	username: text;
	level: integer;
	strength: integer;
	speed: integer;
	skill: integer;
}

// STEP 3 - RUN OPERATION TO ADD A PLAYER TO THE PLAYER TABLE
// OPERATIONS can modify data in the database
operation create_player(
	player_info,
	user_auth: ft3.acc.auth_descriptor
){
	
	// Creates account 
	val account_id = ft3.acc.create_account_with_auth(user_auth);
	val account = ft3.acc.account @ { account_id };
	
	// Call this to add data to player table
	create player(
		account = account,
		username = player_info.username,
		level = player_info.level,
		strength = player_info.strength,
		speed = player_info.speed,
		skill = player_info.skill
	);
}

// STEP 4 - RUN QUERY TO SEARCH UP PREVIOUSLY CREATED PLAYER
// QUERIES cannot modify data in the database and must return a value
query find_player_by_username(username: text){
	
	//  returns player object, zero or one, fails if more than one found
	var player = player @? { .username == username };
	
	// return null if null
	if(player == null){
		return null;
	}
	
	// return data
	return (
		username = player.username,
		level = player.level,
		strength = player.strength,
		speed = player.speed,
		skill = player.skill,
		account_id = player.account.id
	);
}

// STEP 5 - RUN OPERATION TO UPDATE AN EXISTING PLAYER IN THE TABLE
operation update_player(
	player_info,
	nop: byte_array // required so data can be set to the same value more than once
){
	// TYPICALLY WILL WANT TO HAVE A LAYER OF AUTHENTICATION HERE TO PREVENT
	// ANYONE FROM ALTERING DATA, BUT OMITTED FROM DEMO DUE TO TIME
	
	// returns player object, exactly one, fails if zero or more than one found.
	var player = player @ { .username == player_info.username };
	
	// updates mutable data in the table
	player.level = player_info.level;
	player.strength = player_info.strength;
	player.speed = player_info.speed;
	player.skill = player_info.skill;
}

